  //TODO: smaller OLED display code
  //If we're having display issues, try to recover
  if (eDisplayError && cTryToRecover) {
    initializeDisplayDevice();
    if (eDisplayError) { //if we're still having trouble, return
      return;
    }
  }


  gDisplay.invertDisplay(false); //TODO remove?
  gDisplay.clearDisplay();
  gDisplay.setTextSize(1);

  //show the parameter name top-left and the associated value bottom-left
  gDisplay.setCursor(0, 0);
  gDisplay.setTextSize(1);
  switch (gCursor) {
    case CursorSelectHeading: //Display Selected Heading
    {
      gDisplay.println("Heading");
      gDisplay.setCursor(0, 15);
      int tempSelectedHeading = gSelectedHeadingInt;
      char heading[4];
      sprintf(heading, "%03d%c", tempSelectedHeading, (char)(247)); //247 == degree symbol
      gDisplay.println(String(heading));
      break;
    }

    case CursorSelectAltimeter:
      gDisplay.println("Altimeter");
      gDisplay.setCursor(0, 15);
      gDisplay.println(String(gAltimeterSettingInHgDouble) + cInLabel);
      break;

    case CursorSelectOffset:
      gDisplay.println("Offset");
      gDisplay.setCursor(0, 15);
      if (gCalibratedAltitudeOffsetInt > 0) {
        gDisplay.println("+" + String(gCalibratedAltitudeOffsetInt) + cFtLabel);
      }
      else {
        gDisplay.println(String(gCalibratedAltitudeOffsetInt) + cFtLabel);
      }
      break;

    case CursorSelectBrightness:
      gDisplay.println("Brightness");
      gDisplay.setCursor(0, 15);
      gDisplay.println(String(gScreenBrightnessInt));
      break;

    case CursorSelectSensor:
      gDisplay.println("Sensor");
      gDisplay.setCursor(0, 15);
      if (gSensorMode == SensorModeOnShow) {
        gDisplay.println("ON/SHOW");
      }
      else if (gSensorMode == SensorModeOnHide) {
        gDisplay.println("ON/HIDE");
      }
      else {
        gDisplay.println("OFF");
      }
      break;

    case CursorSelectAltitudeUnits:
      gDisplay.println("Alt Units");
      gDisplay.setCursor(0, 15);
      if (gAltitudeUnits == AltitudeUnitsFeet) {
        gDisplay.println("Ft");
      }
      else { //(gAltitudeUnits == AltitudeUnitsMeters) {
        gDisplay.println("Meters");
      }
      break;

    case CursorSelectPressureUnits:
      gDisplay.println("Press Units");
      gDisplay.setCursor(0, 15);
      if (gPressureUnits == PressureUnitsInHg) {
        gDisplay.println("\"Hg");
      }
      else { //(gPressureUnits == PressureUnitsHPa) {
        gDisplay.println("hPa");
      }
      break;

    case CursorViewSoftwareVersion:
      gDisplay.println("Version");
      gDisplay.setCursor(0, 15);
      gDisplay.println(cAppVersion);
      break;

    case CursorViewBatteryLevel:
      gDisplay.println("Battery");
      gDisplay.setCursor(0, 15);
      gDisplay.println("??%");
      break;
  }



  //show the sensor true altitude
  if (eBMP180Failed) { //if there's a sensor error, the top line should be the error message
    gDisplay.setCursor(62, 0);
    gDisplay.println("SENSOR FAIL"); //TODO: in the future, write the error code to EEPROM
  }
  else if (gSensorMode == SensorModeOff || gSelectedAltitudeLong > cHighestAltitudeAlert || gTrueAltitudeDouble > cHighestAltitudeAlert + cAlarm200ToGo) {
    gDisplay.setCursor(68, 0);
    gDisplay.println("SENSOR OFF");
  }
  else if (gSensorMode == SensorModeOnShow) { //...show the current altitude top-right
    gDisplay.setCursor(80, 0);
    gDisplay.println(displayNumber(roundNumber(gTrueAltitudeDouble, cTrueAltitudeRoundToNearest)) + cFtLabel);
  }

  //...Display Selected Altitude
  gDisplay.setTextSize(2);
  gDisplay.setCursor(32, 15);
  long temporarySelectedAltitude = gSelectedAltitudeLong;
  gDisplay.println(displayNumber(temporarySelectedAltitude) + cFtLabel);

  gDisplay.display();